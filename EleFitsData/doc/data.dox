namespace Euclid {
namespace Fits {

/**

\addtogroup data_classes


\section data-intro Introduction


Data classes represent the data which can be read or written in a Fits file.
They are split into header, image, and binary table data classes.

As a spoiler, here is a simplified class diagram:

\image html doc/diagrams/out/FitsData.png


\section data-record Header data classes


`Record` is a very basic template structure which holds the following four fields:
- `keyword`,
- `value`,
- `unit`,
- `comment`.

Its template parameter is the type of the value.

\see header_data_classes


\section data-raster Image data classes


`Raster`s are the in-memory representation of the _n_-D arrays of Fits.
A raster has:
- a dimension (number of axes) as a template parameter,
- a value type as a template parameter,
- a shape (of type `Position`, which is just an alias of `std::array` or `std::vector`),
- some data, i.e. the pixel values, stored contiguously, for example in a `std::vector`.

\see image_data_classes


\section data-column Binary table data classes


`Column`s represent the contents of the data unit of binary table HDUs.
They are made of two components:

- metadata as a `ColumnInfo` instance,
- data as a whatever-you-want!

In order to accommodate whatever-you-want kind of data container,
`Column` is an abstract class whose only assumption is that elements are contiguous in memory,
so that you just need to provide a raw pointer to the first element of the column.

\see bintable_data_classes

*/

}
}