
namespace Fits {

/**

\addtogroup bintable_data_classes


\section bintable_data_classes-info ColumnInfo


`ColumnInfo` is the simple structure which stores the column metadata:
- The value type as a template parameter;
- The name;
- The unit;
- The field shape (column entries can be multidimensional).


\section bintable_data_classes-columns Column, PtrColumn, VecColumn


A `Column` is an abstract class composed of a `ColumnInfo` and some contiguous data.
Analogously to `Raster`, two specializations are provided, and others can be user-defined:
- `PtrColumn` is the lightest structure: it just knows a pointer to the first element of the column;
- `VecColumn` owns the data as a `std::vector` and is compatible with the move semantics.

To write a column, any `Column` implementation works: you can even provide your own, e.g. some `EigenColumn`.
`Column`s are generally read as `VecColumn` instances.
If you want to give or steal the data to or from a `VecColumn`, you can exploit move semantics, as shown in the \ref tuto "":

\snippet EleFitsTutorial.cpp Create columns


\section bintable_data_classes-helpers Segment, ColumnKey, TypedKey

The following helpers are defined:
- `Segment` is just a pair of `long`s used to specify a chunk of a `Column`,
  e.g. for partial reading and writing of binary table HDUs;
- `ColumnKey` is a minimal structure which basically means `long` or `std::string`
  and is responsible for backward indexing resolution;
- `TypedKey` is a typed wrapper used to specify which column to read,
  as well as the desired return type;
  Maker function `as()` is provided to simplify usage (see below).

For example, to read several columns of different types, do:

\code
columns.read_n(as<int>(1), as<float>(3), as<std::string>(8));
\endcode

instead of:

\code
columns.read_n<int, float, std::string>({1, 3, 8}); // Error-prone and illegal!
\endcode

which would be error-prone when reading many columns.

*/

}
}