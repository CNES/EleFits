
namespace Fits {

/**

\page tuto Tutorial


\section tuto-intro Introduction


In this tutorial, we will show how to read and write single-image FITS (SIF) and multi-extension FITS (MEF) files.
This means understanding the usage of the following service classes:

- `SifFile` and `MefFile` at file level,
- `ImageHdu` and `BintableHdu` at HDU level,
- `Header` at header unit level,
- `ImageRaster` and `BintableColumns` at data unit level;

as well as the associated data classes:

- `Record`,
- `Linx::Raster` (basic features),
- `Column`.

We strongly recommend reading first \ref primer, even if you're familiar with the FITS format,
because it introduces `EleFits`-specific wording.

At the end of the tutorial, you will be able to create a MEF file from scratch
with unlimited number of various extensions,
and to read the metadata and data back!

The tutorial is built together with an example program: \ref EleFitsGenerateLife.cpp.
You can already run the program and watch the resulting file:

\code
EleFitsGenerateLife life.fits
fv life.fits
\endcode

\see To go further, at the end of each section, a link points to the reference page for the introduced topic.


\tableofcontents


\section tuto-purpose Program description


EleFitsGenerateLife is a Game of Life.
It first generates a given amount of lives at random positions and then let them evolve for a given number of turns.
Once done, the board, a 3D array (with x, y and time axes) is saved as the Primary HDU of a new FITS file.
Optionally, the generated positions are saved into a binary table extension.


\section tuto-setup Setup


First things first, we have to declare the dependency to EleFits and to use the right headers.
For the first part, head to the \ref md_INSTALL.
For the headers, choose either `SifFile.h` or `MefFile.h` (or both) depending on your needs.
For demonstration, we'll use both:

\snippet EleFitsGenerateLife.cpp Includes


\section tuto-options Program options


The options are simply declared and parsed thanks to Linx' `ProgramOptions`:

\snippet EleFitsGenerateLife.cpp Declare options
\snippet EleFitsGenerateLife.cpp Parse options


\section tuto-generate Let's play!


We're not discussing how to play here, just showing the calls to see the variables used later.

First, we allocate the game data and generate initial positions:

\snippet EleFitsGenerateLife.cpp Initialize

An then run the game:

\snippet EleFitsGenerateLife.cpp Play

At that point, we have a set of 2D positions in `positions` as a 2D array (with x in first row, y in second row),
and their evolution as a 3D array (for x, y and t coordinates) in `board`.


\section tuto-data-classes Data classes


Data classes are the classes which hold the pieces of data read from and written to a FITS file.
There are three main classes:

- `Record` for header units,
- `Raster` for data units of image HDUs,
- `Column` for data units of binary table HDUs.


\subsection tuto-record Record


A keyword record as defined in the FITS standard is a triplet of keyword, value and optional comment rendered in the file as:
\code
KEYWORD = VALUE / comment
\endcode

A unit can be included in the comment as follows:
\code
KEYWORD = VALUE / [unit] comment
\endcode

The value can be a Boolean, an integer, real or complex number, or a string.

`Record` is a simple template class which merely stores those fields.
Here's a how they can be built:

\snippet EleFitsGenerateLife.cpp Create record

The empty string here is the empty unit placeholder, such that the record will be rendered like:
\code
NINIT   = 200 / Initial number of lives
\endcode

\see \ref header_data_classes


\subsection tuto-raster Raster


Images in FITS are _n_-dimensional arrays.
`Raster` is a class which represents this kind of data and provides constant time pixel accessors.
From version 6 on, rasters belong to a dedicated ND image processing library: Linx.

\see \ref image_data_classes


\subsection tuto-column Column


A binary table is made of columns which can be either scalar (each cell contains a value)
or vector (each cell contains several values).
In the latter case, the number of values per cell is named repeat count.

For string columns, the repeat count must be greater than the longest string value.

A `Column` is a simple structure which holds the column name,
repeat count (=1 for scalar columns, >1 for vector columns), unit,
and owns or references some data.

Two kinds of columns are routinely used (others are for advanced usage):
- `Column` owns (allocates and frees) the column data,
- `PtrColumn` merely points to some data pointer.

There are many ways to create columns.

Here's a pair of examples to create a `Column` and a `PtrColumn`, respectively:

\snippet EleFitsGenerateLife.cpp Create columns

\see \ref bintable_data_classes


\section tuto-write-sif Write a SIF file


Now that we have learned about the data classes, we can move to the service classes, or handlers.
The first thing we can do is to create a new file.

The `SiffFile` class represents SIF files.
It extends the `FitsFile` class, which is also the base class of `MefFile`.

Creating (or opening) a file is simply done with the constructor:

\snippet EleFitsGenerateLife.cpp Create SIF

A newly created FITS file consists in an empty Primary,
which can then be accessed and modified, but is never created by hand.

The mode parameter controls the access rights on the file.

The file is closed when the destructor of `MefFile` is called
(although a `FitsFile::close()` method is provided for convenience).

\see \ref file_handlers


\section tuto-write-mef Write a MEF file


In contrast with `SifFile`, `MefFile` provides services to create and access extensions.
Conceptually, `MefFile` is a `FitsFile` with a vector of HDUs.

HDUs are represented by two classes:

- `ImageHdu` to access image HDUs,
- `BintableHdu` to access binary table HDUs.

Both derive from parent class `Hdu`.

To sum up, a `MefFile` is a vector of `Hdu`s, which can be a mix of `ImageHdu`s and `BintableHdu`s.

Records are read and written through a `Header` object,
which is accessible from an `ImageHdu` or a `BintableHdu`
as `header()`.
They can be written and updated one-by-one or by sequences.

An optional template parameter controls the write policy,
e.g. what to do if the given keyword already exists.
By default, a record is created if the keyword doesn't exists,
or updated if the keyword already exists.

\see image_handlers
\see bintable_handlers


\subsection tuto-write-mef-primary Write the Primary data


\subsection tuto-write-mef-extension Append an extension


\section tuto-read-mef Read a MEF file


An existing file can be opened in read-only mode:

\snippet EleFitsGenerateLife.cpp Read MEF


\subsection tuto-read-mef-access Access an extension


\subsection tuto-read-mef-raster Read image data


\subsection tuto-read-mef-columns Read binary table data


*/

}
}

/**
 * \example EleFitsGenerateLife.cpp
 */