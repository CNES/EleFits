namespace Euclid {
namespace FitsIO {

/**

\mainpage Project Overview


\tableofcontents


\section purpose Purpose and scope


The purpose of the package is to provide a user-friendly and efficient API to read and write Fits files.

The package merely consists in a thin CFitsIO wrapper:
There is no intelligence inside.
The actual reading and writing are delegated to CFitsIO,
with as few indirections as possible to minimize overhead.
As compared to CFitsIO API, the main benefits are those of C++ over C:

- No more raw pointers for a **safe memory management**;
- No more type codes but **template traits classes** which handle architecture specifics;
- No more error codes but a proper **exception** handling;
- Structures dedicated to **data storage** instead of unstructured and redundant variables;
- A **lightweight class hierarchy** to represent the actual Fits organization (e.g. HDUs, records, columns...)
instead of the all-in-one and flat `fitsfile` structure;
- A concise and **clear API** instead of the cluttered and verbose one of CFITSIO.

Simplicity comes at the cost of completeness,
and EL_FitsIO misses:
- CFitsIO features that we found less important (like ASCII tables) or too complex,
(like streaming);
- Features already well implemented in other Euclid libraries,
like iterators covered by EL_CatalogLib;
- Features that we didn't have time to implement yet!

For a clear overview of what's there and what's missing, see \ref cfitsio-cov.


\section build Install and depend on EL_FitsIO

See the \ref install_guide.

\section api End-user API overview (and tutorial)


The end-user API is made of two kinds of classes:

- \ref data-classes "Data classes" store raw data;
- \ref handlers "Service classes" allow reading and writing the data.

Records, image rasters and binary table columns are implemented as light structures to abstract from CFitsIO raw pointers:

- Record is made of a name, value, unit and comment;
- Column stores metadata (name, unit, width) and values;
- Raster represents a _n_-dimensional array with constant-time pixel access.

Columns and rasters each have variants, depending on who owns the data and on the data container type.
Check out the \ref data-classes documentation for more details, or the API documentation for even more details.

Service classes are organized according to the Fits format:

- MefFile, the root object, provides file-level services (open, close, access HDUs);
- RecordHdu only handles records;
- BintableHdu and ImageHdu, respectively the binary table and image HDU reader-writers, additionally provide access to the raster and columns.

To make it simple, the end-user API consists of the Euclid::FitsIO namespace.


\section pages Related pages


To go further, the following pages focus on specific topics:

- \ref install_guide
- \ref tuto
- \ref data-classes
- \ref handlers
- \ref types
- \ref optim
- \ref type_map
- \ref cfitsio-cov
- \ref apis-comp
- \ref design

*/

}
}
