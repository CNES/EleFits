namespace Euclid {
namespace FitsIO {

/**

\mainpage Project Overview


\tableofcontents


\section purpose Purpose and scope

The Fits format and C++ language are extremely popular among astronomers, and are at the heart of the Euclid ground segment.
In this context, a library to read and write Fits files in C++ was needed.
Several options existed already, but they did not completely fulfill our needs.
Two C++ libraries are listed  by the <a href=https://fits.gsfc.nasa.gov/fits_libraries.html>Fits support office</a>:
<a href=https://heasarc.gsfc.nasa.gov/fitsio/CCfits/>CCfits</a>
and <a href=https://www.cv.nrao.edu/fits/src>AIPS++</a> (apparently not supported anymore).
Not listed in this page are a library developed by the Jaxa:
<a href=https://www.ir.isas.jaxa.jp/~cyamauch/sli/>SFitsIO</a>,
and one developed for the Rubin Observatory: <a href=https://github.com/lsst/afw>AFW</a>.
Fits++ has been briefly described previously but is not publicly available.
In addition, many C++ developers rely on the historical C library <a href=https://heasarc.gsfc.nasa.gov/fitsio/>CFitsIO</a>.

The main motivation to develop EL_FitsIO (Euclid libraries and executables for Fits) was that none of these alternatives provided a fully consistent type management.
In the worst cases, users needed to know the underlying architecture to ensure integer data can be read or written using given C++ types.
In the best cases, silent casts and copies were performed, which would be too costly for large data sets.

The purpose of EL_FitsIO is to provide a -- sorted by priority -- (1) safe, (2) user-friendly, and (3) efficient library.
The package merely consists in a thin CFitsIO wrapper:
There is no intelligence inside.
The actual reading and writing are delegated to CFitsIO, with as few indirections as possible to minimize overhead.
As compared to CFitsIO, the benefits are mainly those of C++ over C:

- No more raw pointers for a **safe memory management**;
- No more type codes but **template traits classes** which handle architecture specifics;
- No more error codes but a proper **exception** handling;
- Structures dedicated to **data storage** instead of unstructured and redundant variables;
- A **lightweight class hierarchy** to represent the actual Fits organization (e.g. HDUs, records, columns...)
instead of the all-in-one and flat `fitsfile` structure;
- A concise and **clear API** instead of the cluttered and verbose one of CFITSIO.

Simplicity comes at the cost of completeness,
and EL_FitsIO misses:
- CFitsIO features that we found less important (like ASCII tables) or too complex (like streaming);
- Features already well implemented in other Euclid libraries like iterators covered by EL_CatalogLib;
- Features that we didn't have time to implement yet!

For a clear overview of what's there and what's missing, see \ref cfitsio_cov.


\section build Install and depend on EL_FitsIO

See the \ref install_guide.

\section api End-user API overview (and tutorial)


The end-user API is made of two kinds of classes:

- \ref data_classes "Data classes" store raw data;
- \ref handlers "Service classes" allow reading and writing the data.

Records, image rasters and binary table columns are implemented as light structures to abstract from CFitsIO raw pointers:

- Record is made of a name, value, unit and comment;
- Column stores metadata (name, unit, width) and values;
- Raster represents a _n_-dimensional array with constant-time pixel access.

Columns and rasters each have variants, depending on who owns the data and on the data container type.
Check out the \ref data_classes documentation for more details, or the API documentation for even more details.

Service classes are organized according to the Fits format:

- SifFile and MefFile, the root objects, provides file-level services (open, close, access HDUs);
- RecordHdu only handles records;
- BintableHdu and ImageHdu, respectively the binary table and image HDU reader-writers, additionally provide access to the raster and columns.

To make it simple, the end-user API consists of the Euclid::FitsIO namespace, main classes of which are:

- MefFile to open and close a Fits file, and to create and access HDUs (SifFile is a simplified API for Single Image Fits files);
  - RecordHdu to read and write records;
    - Record to store keyword, value, unit and comment;
  - ImageHdu to read and write Primary or image extension data;
    - Raster and its derived classes to store, access and modify pixel values;
  - BintableHdu to read and write binary table extension data;
    - Column and its derived classes to store, access and modify cell values.

General usage guidelines are given in the Euclid::FitsIO namespace,
while detailed descriptions are in the class and member documentations.

\section pages Related pages


To go further, the following pages focus on specific topics:

- \ref install_guide
- \ref tuto
- \ref data_classes
- \ref types
- \ref handlers
- \ref iterators
- \ref optim
- \ref type_map
- \ref cfitsio_cov
- \ref cfitsio_toc
- \ref apis_comp
- \ref design

*/

}
}
