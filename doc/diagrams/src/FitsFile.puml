@startuml

package EL_FitsFile {

RecordHdu <|- ImageHdu
BintableHdu -|> RecordHdu

BintableHdu --* MefFile
RecordHdu --* MefFile
ImageHdu --* MefFile

MefFile --|> FitsFile
SifFile --|> FitsFile
ImageHdu --* SifFile

Permission - FitsFile

}

package EL_FitsData {

Raster <.. ImageHdu
Column <.. BintableHdu
Record <.. RecordHdu

}

enum Permission {
Read
Edit
Create
Overwrite
Temporary
}

class FitsFile {
+ FitsFile (filename, permission)
+ filename ()
+ open (filename, permission)
+ close ()
+ closeAndDelete ()
}

class MefFile {
+ MefFile (filename, permission)
+ hduCount ()
+ hduNames ()
+ access<THdu> (index)
+ accessFirst<THdu> (name)
+ accessPrimary<THdu> ()
+ initRecordExt (name)
+ initImageExt (name, shape)
+ assignImageExt (name, raster)
+ initBintableExt (name, header...)
+ assignBintableExt (name, columns...)
}

class SifFile {
+ SifFile (filename, permission)
+ header ()
+ readRaster<T, n> ()
+ writeRaster<T, n> (raster)
}

class RecordHdu {
+ index ()
+ name ()
+ rename (name)
+ keywords ()
+ parseRecord<T> (keyword)
+ parseRecords<T...> (keywords...)
+ parseRecordsAs<TReturn, T...> (keywords...)
+ writeRecord<T> (record)
+ writeRecords<T...> (records...)
+ updateRecord<T> (record)
+ updateRecords<T...> (records...)
+ deleteRecord (keyword)
}

class ImageHdu {
+ resize<T, n> (shape)
+ readRaster<T, n> ()
+ writeRaster<T, n> (raster)
}

class BintableHdu {
+ readColumn<T> (name)
+ readColumns<T...> (names)
+ writeColumn<T> (column)
+ writeColumn<T...> (columns...)
+ appendColumn<T> (column)
+ appendColumn<T...> (columns...)
}

abstract class Raster {}

abstract class Column {}

@enduml
