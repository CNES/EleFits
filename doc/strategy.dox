namespace Fits {

/**

\addtogroup strategy


\tableofcontents


\section strategy-intro Action!


Often, when reading or writing MEF files, the same actions have to be performed for all or some of the HDUs.
For example, each time an HDU is accessed for the first time, the checksums can be validated.
And before closing the file, the checksums of the edited HDUs can be updated if present.

Instead of doing so manually, e.g.:

\code
MefFile f(filename, FileMode::Edit);

const auto& p = f.primary();
p.verify_checksums();
... // Do something with Primary

for (const auto& image : f.filter<ImageRaster>()) {
  ... // Do something with extension
}

for (const auto& h : f.filter<Header>(HduCategory::Edited)) {
  if (h.has("CHECKSUM") || h.has("DATASUM")) {
    h.update_checksums();
  }
}
\endcode

... `Action`s can be registered in the `MefFile` and performed automatically:

\code
MefFile f(filename, FileMode::Edit, VerifyChecksums());

const auto& p = f.primary();
... // Do something with Primary

for (const auto& image : f.filter<ImageRaster>(HduCategory::Ext)) {
    ... // Do something with extensions
}
\endcode

This removes boilerplate and noise in the code, and guarantees nothing is forgotten.
Moreover, HDUs are guaranteed to be visited only once whatever the action count.


\section strategy-interface Interfaces


Acions are classes which inherit `Action` and override at least one of its methods, like `accessed()` or `closing()`.
Each time an action-related event occurs (an HDU is accessed for the first time or the file is being closed),
all of the registered actions which override the corresponding method are executed.

The list of actions registered in the `MefFile` constitutes the so-called strategy.

A specific part of the strategy relates to internal compression:
it is possible to specify which compression algorithm to use when creating a new image HDU according to predefined criteria.
For more details, refer to \ref compression.

Actions (or complete strategies) can be registered at construction, like in the introductory example,
or using `MefFile::strategy()` methods and/or its `Strategy` instance.

Predefined actions, provided with the library, are listed below.

*/

}
