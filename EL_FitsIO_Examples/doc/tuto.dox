namespace Euclid {
namespace FitsIO {

/**

\page tuto Tutorial


\section tuto-intro Introduction


In this tutorial, we will show how to read and write multi-extension Fits (MEF) files.
This means understanding the usage of MefFile, Hdu, ImageHdu and BintableHdu service classes,
as well as Record, Raster and Column data classes.
We strongly recommend reading first the
<a href=https://heasarc.gsfc.nasa.gov/docs/software/fitsio/c/c_user/node18.html>Fits primer</a>
or
<a href=https://heasarc.gsfc.nasa.gov/docs/heasarc/fits_overview.html>Fits overview</a>
if you don't already know the format.

At the end of the tutorial, you will be able to create a MEF file from scratch with unlimited number of various extensions,
and to read the metadata and data back!

The tutorial is built together with an example program: \ref EL_FitsIO_Tutorial.cpp.
We've embedded the calls to the logger in the snippets below,
so that you can easily map the execution log to the following explanations.
You can already run the program and watch the resulting file:

\code
ERun EL_FitsIO EL_FitsIO_Tutorial --output tuto.fits
fv tuto.fits
\endcode

We'll first discover the data classes, then use them to create a MEF file, and finally read the file and values back.


\tableofcontents


\section tuto-setup Setup


First things first, we have to declare the dependency to EL_FitsIO and to use the right headers and namespaces.
For the first part, head to the \ref install_guide.
For the headers and namespace, here's the only thing you'll have to do:

\snippet EL_FitsIO_Tutorial.cpp Include

There are other headers and namespaces, but those probably cover 90% of the use cases.
Refer to the API documentation for more details.

\see Euclid::FitsIO


\section tuto-data-classes Data classes


\subsection tuto-record Record


A keyword record as defined in the Fits standard is a triplet of keyword, value and comment rendered in the file as:
\code
KEYWORD = VALUE / comment
\endcode

A unit can be included in the comment as follows:
\code
KEYWORD = VALUE / [unit] comment
\endcode

Record is a simple template class which merely stores those fields.
For the purpose of the tutorial, we define a structure to hold our records:

\snippet EL_FitsIO_Tutorial.cpp Tuto records

Here's a how they can be built:

\snippet EL_FitsIO_Tutorial.cpp Create records

\see Record
\see RecordVector
\see Test::generateRandomRecord


\subsection tuto-raster Raster


Images in Fits are _n_-dimensional arrays.
Raster is a class which represents this kind of data and provides constant time pixel accessors.
Template arguments are the pixel type and number of axes.
There are two kinds of rasters:

- VecRaster owns the data as an std::vector;
- VecRefRaster and PtrRaster point to the data owned by another class, as an std::vector or raw pointer
(be careful not to destroy the data while the column is alive).

The rasters of this tutorial are stored in a dedicated structure:

\snippet EL_FitsIO_Tutorial.cpp Tuto rasters

Again, let's show an example of how to create rasters:

\snippet EL_FitsIO_Tutorial.cpp Create rasters

\see Raster
\see VecRaster
\see VecRefRaster
\see PtrRaster
\see Test::RandomRaster


\subsection tuto-column Column

A binary table is made of columns which can be either scalar (each cell contains a value)
or vector (each cell contains several values) columns.
In the latter case, the number of values per cell is named repeat count.

A Column is a mere structure which holds the column name, repeat number (=1 for scalar columns, >1 for vector columns), unit,
and owns or references some data.
Analogously to rasters, columns have several flavors: VecColumn, VecRefColumn and PtrColumn.

The following structure stores the tutorial columns:

\snippet EL_FitsIO_Tutorial.cpp Tuto columns

Here's a set of examples on how create them:

\snippet EL_FitsIO_Tutorial.cpp Create columns

\see Column
\see VecColumn
\see VecRefColumn
\see PtrColumn
\see Test::RandomScalarColumn
\see Test::RandomVectorColumn


\section tuto-file Open (and close) a MEF file


The first thing to do is to create a new file.

The MefFile class represents multi-extension Fits (MEF) files.
It extends the FitsFile class, which is also the base class of SifFile for single-image Fits (SIF) files.

Creating a file simply done with the constructor of MefFile (or SifFile for SIF files!):

\snippet EL_FitsIO_Tutorial.cpp Create a MEF file

The so-called permission parameter controls the rights on the file.
For example, for a read-only opening:

\snippet EL_FitsIO_Tutorial.cpp Open a MEF file

The file is closed when the destructor of MefFile is called (although a FitsFile::close() method is provided just in case).

When you open a MEF file, an empty Primary HDU is created.
It can then be accessed and resized.

\see FitsFile
\see FitsFile::Permission
\see SifFile
\see MefFile

\section tuto-write Write a MEF file


\subsection tuto-write-ext Create extensions


MefFile provides service to create and access extensions.
There are three types of extensions:

- Hdu to read and write records;
- ImageHdu to read and write images (extends Hdu);
- BintableHdu to read and write binary tables (extends Hdu).

Image and binary table HDUs can be considered record HDUs for header work.
Metadata (i.e., header-only) HDUs are image HDUs with empty data.

There are two kinds of services in MefFile for creating extensions:
They can be either initialized with header only or assigned directly with data.
Here's an example of creating image HDUs:

\snippet EL_FitsIO_Tutorial.cpp Create image extensions

And here's one of creating binary table HDUs:

\snippet EL_FitsIO_Tutorial.cpp Create binary table extensions

\see ImageHdu
\see BintableHdu


\subsection tuto-write-record Write records


Records are read and written through Hdu services
(remember ImageHdu and BintableHdu are Hdu).
They can be written and updated one-by-one or by batches.
There are many ways of doing so; here are a few examples:

\snippet EL_FitsIO_Tutorial.cpp Write records

\see Hdu


\section tuto-read Read a MEF file


\subsection tuto-access-hdu Access HDUs


HDUs can be accessed with a set of methods, templated with the type of HDU: BintableHdu, ImageHdu, or Hdu.
For metadata work, we don't need to know the type of HDU:
whether this is an image or binary table HDU has no impact, and a Hdu will be returned by default.

HDUs are accessed either by their name (first HDU whose name matches argument is returned) or by their index,
and a shortcut is provided for the primary HDU (which has index 0):

\snippet EL_FitsIO_Tutorial.cpp Access HDUs

You've probably noticed that we use constant references to the HDU handlers.
Indeed, HDU handlers are owned by the MefFile instance and are not modified by reading and writing services
(this is possible because they do not themeselve store data).

\see MefFile


\subsection tuto-read-record Parse records


Records are parsed using Hdu services.
Like for writing, you can parse several records at once:

\snippet EL_FitsIO_Tutorial.cpp Read records

\see Hdu


\subsection tuto-read-image Read image values


For images, a VecRaster is instantiated, and you can access the pixel values with the subscript operator:

\snippet EL_FitsIO_Tutorial.cpp Read a raster

\see ImageHdu

\subsection tuto-read-bintable Read binary table values


Once you have accessed a BintableHdu, you can read column-wise by giving the column name.
This will return a VecColumn:

\snippet EL_FitsIO_Tutorial.cpp Read columns

\see BintableHdu


\section tuto-conclusion Wrap up


A picture is worth a thousand words; below is the class diagram of what we've just learned
(i.e. the Euclid::FitsIO namespace contents).

To go further or out of curiosity, head to the other [documentation pages](pages.html).
Specifically, data classes and service classes are described in more details in
\ref data_classes and \ref handlers.
To practice or test your own code, you can also browse the Euclid::FitsIO::Test namespace,
which provides ready-to-use functions and classes, such as random records, rasters and columns.

\image html doc/diagrams/out/FitsData.png

\image html doc/diagrams/out/FitsFile.png

\example EL_FitsIO_Tutorial.cpp

*/

}
}
