namespace Euclid {
namespace FitsIO {

/**

\page tuto Tutorial


\section tuto-intro Introduction


In this tutorial, we will show how to read and write multi-extension Fits (MEF) files.
This means understanding the usage of MefFile, RecordHdu, BintableHdu and ImageHdu service classes,
as well as Record, Column and Raster data classes.
We strongly recommend reading first the
<a href=https://heasarc.gsfc.nasa.gov/docs/software/fitsio/c/c_user/node18.html>Fits primer</a>
or
<a href=https://heasarc.gsfc.nasa.gov/docs/heasarc/fits_overview.html>Fits overview</a>
if you don't already know the format.

At the end of the tutorial, you will be able to create a MEF file from scratch with unlimited number of various extensions,
and to read the data back!

The tutorial is built together with an example program: EL_FitsIO_Tutorial.
We've embedded the calls to the logger in the snippets below,
so that you can easily map the execution log to the following explanations.
You can already run the program and watch the resulting file:

\verbatim
ERun EL_FitsIO EL_FitsIO_Tutorial --output tuto.fits
fv tuto.fits
\endverbatim

We'll first discover the data classes, then use them to create a MEF file, and finally read the file and values back.


\tableofcontents


\section tuto-setup Setup


First things first, we have to declare the dependency to EL_FitsIO and to use the right headers and namespaces.
For the first part, head to the \ref index.
For the headers and namespace, here's the only thing you'll have to do:

\snippet EL_FitsIO_Tutorial.cpp Include

We display here the full list of classes which we're going to use,
but feel free to directly use the whole Euclid::FitsIO namespace in your programs.

There are other headers and namespaces, but that probably covers 90% of the use cases.
Refer to the API documentation for more details.


\section tuto-data-classes Data classes


\subsection tuto-record Record


A keyword record is a triplet of keyword, value and comment.
A unit can be included in the comment as follows:
\code
KEYWORD = VALUE / [unit] comment
\endcode

Record is a simple template class which only stores those fields.

\snippet EL_FitsIO_Tutorial.cpp Create a complete record

Refer to the Record documentation for more details.


\subsection tuto-column Column


A Column is a mere structure which holds the column name, repeat number (=1 for scalar columns, >1 for vector columns), unit,
and owns or references some data.
There are two kinds of columns:

- VecColumn owns the data as an std::vector;
- VecRefColumn and PtrColumn point to the data owned by another class, as a std::vector or raw pointer
(be careful not to destroy the data while the column is alive).

Both classes offer a method to get a constant pointer to the data.
VecColumn also provides a reference to its std::vector, so that data can be moved without copying.

Here's an example using move semantics to create a VecColumn:

\snippet EL_FitsIO_Tutorial.cpp Create and fill a column


\subsection tuto-raster Raster


Images in Fits are _n_-dimensional arrays.
Raster is a class which represents this kind of data and provides constant time pixel accessors.
Template arguments are the pixel type and number of axes.
Analogously to columns, rasters have several flavors: VecRaster, VecRefRaster and PtrRaster.

Again, let's show an example with a VecRaster (without moves here, but the class is compatible):

\snippet EL_FitsIO_Tutorial.cpp Create and fill a raster


\section tuto-file Open (and close) a MEF file


The first thing to do is to open a file.
This is simply done with the constructor of MefFile:

\snippet EL_FitsIO_Tutorial.cpp Open a MefFile

To see the available permissions, check the FitsFile::Permission enumeration documentation (a MefFile is a FitsFile).

The file is closed when the destructor of MefFile is called (although a FitsFile::close() method is provided just in case).

When you open a MEF file, an empty Primary HDU is created.
It can then be accessed and resized.


\section tuto-write Write a MEF file


\subsection tuto-write-ext Create extensions


MefFile provides service to create and access extensions.
There are three types of extensions:
- RecordHdu to read and write records;
- BintableHdu to read and write bintables (extends RecordHdu);
- ImageHdu to read and write images (extends RecordHdu).

Bintable and image HDUs can be considered record HDUs for header work.
Metadata (i.e., header-only) HDUs are image HDUs with empty data.

There are two kinds of services in MefFile for creating extensions:
They can be either initialized with header only or assigned directly with data.
You should never instanciate an HDU handler yourself with its constructor;
it has no sense if it is not owned by a MefFile.

Here's an example of assigning a BintableHdu with columns:

\snippet EL_FitsIO_Tutorial.cpp Assign a bintable extension

And here's an example of initializing and then assigning an ImageHdu:

\snippet EL_FitsIO_Tutorial.cpp Initialize an image extension

For more details, refer to the BintableHdu and ImageHdu documentations.


\subsection tuto-write-record Write records


Records are read and written through RecordHdu services
(remember ImageHdu and BintableHdu are RecordHdu).
They can be written and updated one-by-one this way:

\snippet EL_FitsIO_Tutorial.cpp Write and update a record

It is also possible to write several records at once.
In this case, Record objects must be instanciated,
or template parameters must be provided explicitely:

\snippet EL_FitsIO_Tutorial.cpp Write several records


\section tuto-read Read a MEF file


\subsection tuto-access-hdu Access HDUs


HDUs can be accessed with a set of methods, templated with the type of HDU: BintableHdu, ImageHdu, or RecordHdu.
For metadata work, we don't need to know the type of HDU:
whether this is an image or bintable HDU has no impact, and a RecordHdu will be returned by default.

HDUs are accessed either by their name (first HDU whose name matches argument is returned):

\snippet EL_FitsIO_Tutorial.cpp Access an HDU by name

or by their index:

\snippet EL_FitsIO_Tutorial.cpp Access an HDU by index

A shortcut is provided for the primary HDU:

\snippet EL_FitsIO_Tutorial.cpp Access primary HDU

You've probably noticed that we use constant references here.
Indeed, HDU handlers are owned by the MefFile instance and are not modified by reading and writing services
(this is possible because they do not themeselve store data).


\subsection tuto-read-record Parse records


Records are parsed using RecordHdu services:

\snippet EL_FitsIO_Tutorial.cpp Read a record

Like for writing, you can parse several records at once.
The standalone way of doing so is to output a tuple of records.
Yet, this is not the most straightforward way, as you have to acces (std::get or std::tie)
the individual records afterwards.
There is a cleaner way, which is probably closer to what you want to do with the values:
You can provide your own return type, as a brace-constructible object, like a mere struct.

\snippet EL_FitsIO_Tutorial.cpp Read several records

To know more about this feature, check the RecordHdu::parseRecordsAs documentation.


\subsection tuto-read-bintable Read bintable values


Once you have accessed a BintableHdu, you can read column-wise by giving the column name.
This will return a VecColumn:

\snippet EL_FitsIO_Tutorial.cpp Read bintable values


\subsection tuto-read-image Read image values


For images, a VecRaster is instanciated, and you can access the pixel values with the subscript operator:

\snippet EL_FitsIO_Tutorial.cpp Read image values


\section tuto-conclusion Wrap up


A picture is worth a thousand words; below is the class diagram of what we've just learned (i.e. the Euclid::FitsIO namespace contents).

To go further or out of curiosity, head to the other [documentation pages](pages.html).
Specifically, data classes and service classes are described in more details in
\ref data-classes and \ref handlers.
To practice or test your own code, you can also browse the Test namespace,
which provides ready-to-use functions and classes, such as random columns and rasters.

\image html doc/diagrams/out/FitsData.png

\image html doc/diagrams/out/FitsFile.png

*/

}
}
