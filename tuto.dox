namespace Euclid {
namespace FitsIO {

/**

\page tuto Tutorial


\section tuto-intro Introduction


In this tutorial, we will show how to read and write multi-extension Fits (MEF) files.
This means understanding the usage of MefFile, BintableHdu and ImageHdu service classes,
as well as Record, Column and Raster data classes.

At the end of the tutorial, you will be able to create a MEF file from scratch with unlimited number of various extensions,
and to read the data back!

The tutorial is built together with an example program: EL_FitsIO_Tutorial.
You can already run it and watch the resulting file:

\verbatim
ERun EL_FitsIO EL_FitsIO_Tutorial --output tuto.fits
fv tuto.fits
\endverbatim

We'll first discover the data classes, then use them to create a MEF file, and finally read the file and values back.


\tableofcontents


\section tuto-data-classes Data classes


\subsection tuto-record Record


As defined in the Fits standard, a record is a triplet of keyword, value and comment.
A convension is proposed to interpret part of the comment as the value unit.

Record is a simple template class which only stores those fields.

\snippet EL_FitsIO_Tutorial.cpp Create a complete record


\subsection tuto-column Column


A Column is a mere structure which holds the column name, repeat number (=1 for scalar columns), unit and data as a vector.

\snippet EL_FitsIO_Tutorial.cpp Create and fill a column


\subsection tuto-raster Raster


Images in Fits are _n_-dimensional arrays.
Raster is a class which represents this kind of data and provides pixel accessors.

Template arguments are the pixel type and number of axes.

\snippet EL_FitsIO_Tutorial.cpp Create and fill a raster


\section tuto-file Open (and close) a MEF file


The first thing to learn is how to open a file.
This is simply done with the constructor of MefFile:

\snippet EL_FitsIO_Tutorial.cpp Open a MefFile

To see the available permissions, check the FitsFile::Permission enumeration documentation.

The file is closed when the destructor of MefFile is called.


\section tuto-write Write a MEF file


\subsection tuto-write-ext Create extensions


Extensions can be either initialized with metadata only or assigned directly with data.

Here's an example of assigning a BintableHdu with columns:

\snippet EL_FitsIO_Tutorial.cpp Assign a bintable extension

And here's an example of assigning an ImageHdu:

\snippet EL_FitsIO_Tutorial.cpp Assign an image extension

In both cases, it would've been possible to just initialize the extensions first,
and assign data later.
For more details, refer to the BintableHdu and ImageHdu documentations.


\subsection tuto-write-record Write records

Records can be written and updated one-by-one this way:

\snippet EL_FitsIO_Tutorial.cpp Write and update a record

It is also possible to write several records at once.
In this case, Record objects must be instanciated explicitely:

\snippet EL_FitsIO_Tutorial.cpp Write several records

Of course, this applies to any HDU: the base class -- where to find documentation -- is RecordHdu.


\section tuto-read Read a MEF file


\subsection tuto-access-hdu Access HDUs


HDUs can be accessed with a set of methods, templated with the type of HDU: ImageHdu or BintableHdu.
For metadata work, we don't need to know the type of HDU:
whether this is an image or bintable HDU has no impact.

HDUs are accessed either by their name (first HDU whose name matches is returned):

\snippet EL_FitsIO_Tutorial.cpp Access an HDU by name

or by their index:

\snippet EL_FitsIO_Tutorial.cpp Access an HDU by index

A shortcut is provided for the primary HDU:

\snippet EL_FitsIO_Tutorial.cpp Access primary HDU

You've probably noticed that we use constant references here.
Indeed, they are owned by the MefFile instance and are not modified by reading and writing services
(this is possible because they do not themeselve store data).


\subsection tuto-read-record Parse records


Records are parsed using RecordHdu services
(naturally, ImageHdu and BintableHdu extend RecordHdu):

\snippet EL_FitsIO_Tutorial.cpp Read a record

To read and write several records at once, proper Record objects must be instanciated.

\snippet EL_FitsIO_Tutorial.cpp Read several records

Records can be written or updated analogously one by one:

\snippet EL_FitsIO_Tutorial.cpp Write and update a record

or all together:

\snippet EL_FitsIO_Tutorial.cpp Write several records


\subsection tuto-read-bintable Read bintable values


\snippet EL_FitsIO_Tutorial.cpp Read bintable values


\subsection tuto-read-image Read image values


\snippet EL_FitsIO_Tutorial.cpp Read image values


\section tuto-conclusion Wrap up


A picture is worth a thousand words; here's the class diagram of what we've just learned:

\image html doc/diagrams/out/FitsFile.png

*/

}
}
